<?php/** * @see Beausy_Service_Paypal_Response_Nvp_Abstract */require_once 'Beausy/Service/Paypal/Response/Nvp/Abstract.php';/** * * Beausy * * @author    Beau Hastings <beausy@gmail.com> * @copyright Beau Hastings * @license   GNU GPL version 2 {@link http://www.gnu.org/licenses/gpl-2.0.html} * */class Beausy_Service_Paypal_Response_Nvp_DoDirectPayment extends Beausy_Service_Paypal_Response_Nvp_Abstract{  /**   * Unique transaction ID of the payment.   * @var string   */  protected $_transactionId;  /**   * Amount of the payment as specified by you on DoDirectPaymentRequest for   * reference transactions with direct payments.   * @var string   */  protected $_amount;  /**   * Address Verification System response code.   * @var string   */  protected $_avscode;  /**   * Result of the CVV2 check by PayPal.   * @var string   */  protected $_cvv2match;  /**   * Filter ID, including the filter type   * @var array   */  protected $_fmffilterId;  /**   * Filter name, including the filter type   * @var array   */  protected $_fmffilterName;  /**   * ThreeDSecure Response Fields   * @var Beausy_Service_Paypal_Data_Response_ThreeDSecure   */  protected $_threeDSecure;  /**   * Parses the fields of the Paypal API response   *   * @param array $response   * @return void   */  public function parse($response)  {    /*     * Parse fields that come with every Paypal response     */    parent::parse($response);    /*     * If Paypal returned an error there are no additional fields to parse     */    if ($this->isError())      return;    $this->_transactionId = $response['TRANSACTIONID'];    $this->_amount        = $response['AMT'];    $this->_avscode       = $response['AVSCODE'];    $this->_cvv2match     = $response['CVV2MATCH'];    // Loop and find all filter IDs    for ($i = 0; isset($response["L_FMFfilterID$i"]); $i++)      $this->_fmffilterId[] = $response["L_FMFfilterID$i"];    // Loop and find all filter names    for ($i = 0; isset($response["L_FMFfilterNAME$i"]); $i++)      $this->_fmffilterName[] = $response["L_FMFfilterNAME$i"];    // ThreeDSecure Response Fields    $this->_threeDSecure = new Beausy_Service_Paypal_Data_Response_ThreeDSecure();    if (isset($response['VPAS']))      $this->_threeDSecure->setVpas($response['VPAS']);    if (isset($response['ECISUBMITTED3DS']))      $this->_threeDSecure->setEciSubmitted3ds($response['ECISUBMITTED3DS']);  }  /**   * Retrieve the unique transaction ID of the payment.   *   * @return string   */  public function getTransactionId()  {    return $this->_transactionId;  }  /**   * Retrieve the amount of the payment as specified by you on DoDirectPaymentRequest for reference transactions with direct payments   *   * @return string   */  public function getAmount()  {    return $this->_amount;  }  /**   * Retrieve the address verification system response code   *   * @return string   */  public function getAvsCode()  {    return $this->_avscode;  }  /**   * Retrieve the result of the CVV2 check by PayPal   *   * @return string   */  public function getCvv2Match()  {    return $this->_cvv2match;  }  /**   * Retrieve the filter IDs, including the filter types   *   * @return array   */  public function getFmfFilterId()  {    return $this->_fmffilterId;  }  /**   * Retrieve the filter names, including the filter types   *   * @return array   */  public function getFmfFilterName()  {    return $this->_fmffilterName;  }  /**   * Retrieve the ThreeDSecure Response Fields   *   * @return Beausy_Service_Paypal_Data_Response_ThreeDSecure   */  public function getThreeDSecure()  {    return $this->_threeDSecure;  }}