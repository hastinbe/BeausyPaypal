<?php/** * @see Beausy_Service_Paypal_Data_Abstract */require_once 'Beausy/Service/Paypal/Data/Abstract.php';/** * * Beausy * * @author    Beau Hastings <beausy@gmail.com> * @copyright Beau Hastings * @license   GNU GPL version 2 {@link http://www.gnu.org/licenses/gpl-2.0.html} * */class Beausy_Service_Paypal_Data_PaymentDetailsItemType extends Beausy_Service_Paypal_Data_Abstract{  const ITEMCATEGORY_DIGITAL  = 'Digital';  const ITEMCATEGORY_PHYSICAL = 'Physical';  /**   * Payment number or index   * @var integer   */  private $_paymentIndex = 0;  /**   * Item index   * @var integer   */  private $_itemIndex = 0;  /**   * Item name   * @var string   */  private $_name;  /**   * Item description   * @var string   */  private $_description;  /**   * Cost of item   * @var string   */  private $_amount;  /**   * Item number   * @var string   */  private $_number;  /**   * Item quantity   * @var string   */  private $_quantity = 0;  /**   * Item sales tax   * @var string   */  private $_taxAmount;  /**   * Item weight corresponds to the weight of the item   * @var string   */  private $_itemWeightValue;  /**   * Item weight unit of measurement   * @var string   */  private $_itemWeightUnit;  /**   * Item length corresponds to the length of the item   * @var string   */  private $_itemLengthValue;  /**   * Item length unit of measurement   * @var string   */  private $_itemLengthUnit;  /**   * Item width corresponds to the width of the item   * @var string   */  private $_itemWidthValue;  /**   * Item width unit of measurement   * @var string   */  private $_itemWidthUnit;  /**   * Item height corresponds to the height of the item   * @var string   */  private $_itemHeightValue;  /**   * Item height unit of measurement   * @var string   */  private $_itemHeightUnit;  /**   * URL for the item   * @var string   */  private $_itemUrl;  /**   * Digital or Physical   * @var string   */  private $_itemCategory;  /**   * Set payment index   *   * @param   int  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setPaymentIndex($value)  {    $value = (int) $value;    $this->_paymentIndex = $value;    return $this;  }  /**   * Retrieve payment index   * @return int   */  public function getPaymentIndex()  {    return $this->_paymentIndex;  }  /**   * Set item index   *   * @param   int  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemIndex($value)  {    $value = (int) $value;    $this->_itemIndex = $value;    return $this;  }  /**   * Retrieve item index   * @return string   */  public function getItemIndex()  {    return $this->_itemIndex;  }  /**   * Set Item name   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setName($value)  {    $this->_name = $value;    return $this;  }  /**   * Retrieve Item name   * @return string   */  public function getName()  {    return $this->_name;  }  /**   * Set Item description   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setDescription($value)  {    $this->_description = $value;    return $this;  }  /**   * Retrieve Item description   * @return string   */  public function getDescription()  {    return $this->_description;  }  /**   * Set Cost of item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setAmount($value)  {    $this->_amount = $value;    return $this;  }  /**   * Retrieve Cost of item   * @return string   */  public function getAmount()  {    return $this->_amount;  }  /**   * Set Item number   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setNumber($value)  {    $this->_number = $value;    return $this;  }  /**   * Retrieve Item number   * @return string   */  public function getNumber()  {    return $this->_number;  }  /**   * Set Item quantity   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setQuantity($value)  {    $this->_quantity = $value;    return $this;  }  /**   * Retrieve Item quantity   * @return string   */  public function getQuantity()  {    return $this->_quantity;  }  /**   * Set Item sales tax   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setTaxAmount($value)  {    $this->_taxAmount = $value;    return $this;  }  /**   * Retrieve Item sales tax   * @return string   */  public function getTaxAmount()  {    return $this->_taxAmount;  }  /**   * Set weight of the item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemWeightValue($value)  {    $this->_itemWeightValue = $value;    return $this;  }  /**   * Retrieve weight of the item   * @return string   */  public function getItemWeightValue()  {    return $this->_itemWeightValue;  }  /**   * Set unit of measurement   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemWeightUnit($value)  {    $this->_itemWeightUnit = $value;    return $this;  }  /**   * Retrieve unit of measurement   * @return string   */  public function getItemWeightUnit()  {    return $this->_itemWeightUnit;  }  /**   * Set length of the item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemLengthValue($value)  {    $this->_itemLengthValue = $value;    return $this;  }  /**   * Retrieve length of the item   * @return string   */  public function getItemLengthValue()  {    return $this->_itemLengthValue;  }  /**   * Set unit of measurement   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemLengthUnit($value)  {    $this->_itemLengthUnit = $value;    return $this;  }  /**   * Retrieve unit of measurement   * @return string   */  public function getItemLengthUnit()  {    return $this->_itemLengthUnit;  }  /**   * Set width of the item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemWidthValue($value)  {    $this->_itemWidthValue = $value;    return $this;  }  /**   * Retrieve width of the item   * @return string   */  public function getItemWidthValue()  {    return $this->_itemWidthValue;  }  /**   * Set unit of measurement   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemWidthUnit($value)  {    $this->_itemWidthUnit = $value;    return $this;  }  /**   * Retrieve unit of measurement   * @return string   */  public function getItemWidthUnit()  {    return $this->_itemWidthUnit;  }  /**   * Set height of the item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemHeightValue($value)  {    $this->_itemHeightValue = $value;    return $this;  }  /**   * Retrieve height of the item   * @return string   */  public function getItemHeightValue()  {    return $this->_itemHeightValue;  }  /**   * Set unit of measurement   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemHeightUnit($value)  {    $this->_itemHeightUnit = $value;    return $this;  }  /**   * Retrieve unit of measurement   * @return string   */  public function getItemHeightUnit()  {    return $this->_itemHeightUnit;  }  /**   * Set URL for the item   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemUrl($value)  {    $this->_itemUrl = $value;    return $this;  }  /**   * Retrieve URL for the item   * @return string   */  public function getItemUrl()  {    return $this->_itemUrl;  }  /**   * Set item category   *   * @param   string  $value   * @return  Beausy_Service_Paypal_Data_PaymentDetailsItemType   */  public function setItemCategory($value)  {    $this->_itemCategory = $value;    return $this;  }  /**   * Retrieve item category   * @return string   */  public function getItemCategory()  {    return $this->_itemCategory;  }  /**   * Returns this class as an array   *   * @return array   */  public function toArray()  {    $array = array();    $array['L_PAYMENTREQUEST_'.$this->_paymentIndex.'_NAME'.$this->_itemIndex] = $this->_name;    $array['L_PAYMENTREQUEST_'.$this->_paymentIndex.'_AMT'.$this->_itemIndex]  = $this->_amount;    if (!empty($this->_itemCategory))    {      $array['L_PAYMENTREQUEST_'.$this->_paymentIndex.'_ITEMCATEGORY'.$this->_itemIndex] = $this->_itemCategory;      $array['L_PAYMENTREQUEST_'.$this->_paymentIndex.'_QTY'.$this->_itemIndex] = $this->_quantity;    }    // Optional fields (key=PayPal field name, value=internal variable name)    $optional = array(      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_DESC',            'variable' => '_description'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_NUMBER',          'variable' => '_number'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_TAXAMT',          'variable' => '_taxAmount'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMWEIGHTVALUE', 'variable' => '_itemWeightValue'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMWEIGHTUNIT',  'variable' => '_itemWeightUnit'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMLENGTHVALUE', 'variable' => '_itemLengthValue'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMLENGTHUNIT',  'variable' => '_itemLengthUnit'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMWIDTHVALUE',  'variable' => '_itemWidthValue'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMWIDTHUNIT',   'variable' => '_itemWidthUnit'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMHEIGHTVALUE', 'variable' => '_itemHeightValue'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMHEIGHTUNIT',  'variable' => '_itemHeightUnit'),      array('prefix' => 'L_PAYMENTREQUEST_', 'suffix' => '_ITEMURL',         'variable' => '_itemUrl'),    );    // Apply optional options and append item index number to each key as required by the PayPal API    foreach($optional as $option)      if (isset($this->$option['variable']))        $array[$option['prefix'] . $this->_paymentIndex . $option['suffix'] . $this->_itemIndex] = $this->$option['variable'];    return $array;  }}